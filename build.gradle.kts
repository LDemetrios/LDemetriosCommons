import java.io.ByteArrayOutputStream

plugins {
    kotlin("jvm") version "1.9.21"
    `java-library`
    `maven-publish`
//    id("org.jetbrains.kotlin.jvm") version "1.7.21"

}

group = "org.ldemetrios"
version = "1.0"

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:1.9.21")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.10.0")
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("io.kotest:kotest-assertions-core-jvm:5.6.2")
    testImplementation("io.kotest:kotest-property-jvm:5.6.2")

    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.21")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.9.0")

    implementation("org.junit.jupiter:junit-jupiter-api:5.10.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
    implementation("org.jetbrains.kotlin:kotlin-script-runtime:RELEASE")

    implementation("org.jetbrains.kotlin:kotlin-script-runtime:1.7.21")
    implementation("io.github.kscripting:kscript-annotations:1.5.0")
//    implementation("com.github.holgerbrandl:kutils:0.12")
}

//java.sourceCompatibility = JavaVersion.VERSION_1_8

operator fun String.invoke(vararg args: String): List<String> {
    val out = ByteArrayOutputStream()
//    val err = ByteArrayOutputStream()
    val res = project.exec {
        commandLine(this@invoke, *args)
        standardOutput = out
        errorOutput = System.err
        workingDir = project.projectDir
    }

    res.rethrowFailure().assertNormalExitValue()
    return out.toString().split(Regex("\r\n|[\r\n\u2028\u2029\u0085]"))
}

val `typst-txt` = "$rootDir/src/main/resources/typst-txt"
val mainResources = "$rootDir/src/main/resources"

tasks.register("codegen") {
//    dependsOn("kscript")
    group = "code generation"
    description = "Generates code from using typst-txt"
    dependsOn("clean-codegen")
    doLast {
        val sources = ("find"(mainResources, "-name", "*.typ")) -
                ("find"(mainResources, "-name", "*.typ", "-maxdepth", "1")).toSet()

        "cp"("$mainResources/buildrules.typ", "$mainResources/rules.typ")

        for (source in sources) {
            println("Builder: Compiling $source")
            val relativeName = source.drop("$mainResources/".length).dropLast(".typ".length)
            val dir = relativeName.split("/").dropLast(1).joinToString("/")
            val target = File("$rootDir/src/main/kotlin/${relativeName}_.kt")

            "mkdir"("-p", "$rootDir/src/main/kotlin/$dir")

            `typst-txt`("c", "--root", mainResources, source, "--format", "txt")

            target.createNewFile()
            target.writeText(
                File("$mainResources/$relativeName.txt").readText().replace(";;", "\n") + "\n"
            )
            File("$mainResources/$relativeName.txt").delete()
        }
    }
}

tasks.register("clean-codegen") {
    group = "code generation"
    description = "Deletes code generated by typst-txt"
    doLast {
        "find"("$rootDir/src/main/kotlin", "-name", "*_.kt").forEach {
            println("Cleaner: Deleting $it")

            File(it).delete()
        }
    }
}

tasks.register("preview-codegen") {
    group = "code generation"
    description = "Generates pdf with code that is about to be generated"
    dependsOn("clean-preview-codegen")
    doLast {
        val sources = ("find"(mainResources, "-name", "*.typ")) -
                ("find"(mainResources, "-name", "*.typ", "-maxdepth", "1")).toSet()

        "cp"("$mainResources/buildrules.typ", "$mainResources/rules.typ")

        for (source in sources) {
            println("Preview Builder: Compiling $source")

            val relativeName = source.drop("$mainResources/".length).dropLast(".typ".length)
            val dir = relativeName.split("/").dropLast(1).joinToString("/")

            "mkdir"("-p", "$rootDir/src/main/kotlin/$dir")
            `typst-txt`("c", "--root", mainResources, source, "--format", "pdf")
        }
    }
}

tasks.register("clean-preview-codegen") {
    group = "code generation"
    description = "Deletes pdf generated by preview-codegen"
    doLast {
        "find"(mainResources, "-name", "*.pdf").forEach {
            println("Cleaner: Deleting $it")

            File(it).delete()
        }
    }
}

fun registerTasksGraph(name:String, filename:String, descr:String, doSimplify: Boolean) {
    tasks.register(name) {
        group = "custom"
        description = descr
        doLast {
            val dotContent = StringBuilder()
            val dot = File(rootProject.rootDir, filename)


            dotContent.append("digraph {\n")
            dotContent.append("  graph [labelloc=t,fontsize=30];\n")
//        dotContent.append("  node [style=filled, fillcolor=\"#bbbbbb\"];\n")

            val edges = mutableListOf<Pair<String, String>>()
            tasks.forEach { task ->
                task.taskDependencies.getDependencies(task).forEach { dep ->
                    edges.add(dep.name to task.name)
                }
            }

            if(doSimplify) {
        var size = edges.size + 1
        while (size > edges.size) {
            size = edges.size
            for ((st, end) in edges.toList() /* clone */) {
                for (mid in edges.map { it.second }) {
                    if (st to mid in edges && mid to end in edges) {
                        edges.remove(st to end)
                    }
                }
            }
        }
            }

            edges.forEach { (from, to) ->
                dotContent.append("  \"$from\" -> \"$to\"")
                dotContent.append(" [style=dotted]")
                dotContent.append("\n")
            }

            dotContent.append("\n")
            dotContent.append("}\n")

            dot.createNewFile()
            dot.writeText(dotContent.toString())

            project.exec {
                commandLine("dot", "-Tpng", "-O", filename)
                workingDir(rootProject.rootDir)
            }
            dot.delete()
        }
    }
}

registerTasksGraph("tasksGraph", "project.dot", "graph tasks using gviz", false)
registerTasksGraph("tasksGraphClean", "project-clean.dot", "graph tasks using gviz without redundant edges", true)

tasks.named("compileKotlin") {
    dependsOn("codegen")
}

tasks.named("jar") {
    dependsOn("test")
}

publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
    this.repositories {
        mavenLocal()
    }
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc> {
    options.encoding = "UTF-8"
}

tasks.test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(17)
}
